module LLaMACpp
  VERSION: String
  LLAMA_CPP_VERSION: String
  LLAMA_DEFALUT_SEED: String

  LLAMA_MAX_DEVICES: Integer

  LLAMA_FTYPE_ALL_F32: Integer
  LLAMA_FTYPE_MOSTLY_F16: Integer
  LLAMA_FTYPE_MOSTLY_Q4_0: Integer
  LLAMA_FTYPE_MOSTLY_Q4_1: Integer
  LLAMA_FTYPE_MOSTLY_Q4_1_SOME_F16: Integer
  LLAMA_FTYPE_MOSTLY_Q8_0: Integer
  LLAMA_FTYPE_MOSTLY_Q5_0: Integer
  LLAMA_FTYPE_MOSTLY_Q5_1: Integer
  LLAMA_FTYPE_MOSTLY_Q2_K: Integer
  LLAMA_FTYPE_MOSTLY_Q3_K_S: Integer
  LLAMA_FTYPE_MOSTLY_Q3_K_M: Integer
  LLAMA_FTYPE_MOSTLY_Q3_K_L: Integer
  LLAMA_FTYPE_MOSTLY_Q4_K_S: Integer
  LLAMA_FTYPE_MOSTLY_Q4_K_M: Integer
  LLAMA_FTYPE_MOSTLY_Q5_K_S: Integer
  LLAMA_FTYPE_MOSTLY_Q5_K_M: Integer
  LLAMA_FTYPE_MOSTLY_Q6_K: Integer
  LLAMA_FTYPE_MOSTLY_IQ2_XXS: Integer
  LLAMA_FTYPE_MOSTLY_IQ2_XS: Integer
  LLAMA_FTYPE_MOSTLY_Q2_K_S: Integer
  LLAMA_FTYPE_MOSTLY_Q3_K_XS: Integer

  LLAMA_KV_OVERRIDE_INT: Integer
  LLAMA_KV_OVERRIDE_FLOAT: Integer
  LLAMA_KV_OVERRIDE_BOOL: Integer

  LLAMA_GRETYPE_END: Integer
  LLAMA_GRETYPE_ALT: Integer
  LLAMA_GRETYPE_RULE_REF: Integer
  LLAMA_GRETYPE_CHAR: Integer
  LLAMA_GRETYPE_CHAR_NOT: Integer
  LLAMA_GRETYPE_CHAR_RNG_UPPER: Integer
  LLAMA_GRETYPE_CHAR_ALT: Integer

  LLAMA_ROPE_SCALING_UNSPECIFIED: Integer
  LLAMA_ROPE_SCALING_NONE: Integer
  LLAMA_ROPE_SCALING_LINEAR: Integer
  LLAMA_ROPE_SCALING_YARN: Integer
  LLAMA_ROPE_SCALING_MAX_VALUE: Integer

  LLAMA_SPLIT_NONE: Integer
  LLAMA_SPLIT_LAYER: Integer
  LLAMA_SPLIT_ROW: Integer

  def self?.backend_init: (?numa: bool) -> void
  def self?.backend_free: () -> void
  def self?.model_quantize: (input_path: String, output_path: String, params: ModelQuantizeParams) -> void
  def self?.generate: (::LLaMACpp::Context, String,
    ?n_predict: Integer, ?n_threads: Integer, ?n_keep: Integer, ?n_batch: Integer,
    ?repeat_last_n: Integer, ?repeat_penalty: Float, ?frequency: Float, ?presence: Float,
    ?top_k: Integer, ?top_p: Float, ?tfs_z: Float, ?typical_p: Float, ?temperature: Float) -> String
  def self?.print_system_info: () -> void
  def self?.time_us: () -> Integer
  def self?.mmap_supported?: () -> bool
  def self?.mlock_supported?: () -> bool
  def self?.max_devices: () -> Integer

  class TokenData
    public

    def initialize: (id: Integer, logit: Float, p: Float) -> void
    def id: () -> Integer
    def id=: (Integer) -> Integer
    def logit: () -> Float
    def logit=: (Float) -> Float
    def p: () -> Float
    def p=: (Float) -> Float
  end

  class TokenDataArray
    public

    def initialize: (Array[::LLaMACpp::TokenData], ?sorted: bool) -> void
    def size: () -> Integer
    def sorted: () -> bool
  end

  class Model
    public

    def initialize: (model_path: String, params: ::LLaMACpp::ModelParams) -> void
                  | () -> void
    def empty?: () -> bool
    def free: () -> void
    def load: (model_path: String, params: ::LLaMACpp::ModelParams) -> void
    def apply_lora_from_file: (lora_path: String, ?scale: Float, ?base_model_path: String, ?n_threads: Integer) -> void
    def n_vocab: () -> Integer
    def n_ctx_train: () -> Integer
    def n_embd: () -> Integer
    def rope_freq_scale_train: () -> Float
    def token_to_piece: (Integer) -> String
    def tokenize: (text: String, ?n_max_tokens: Integer, ?add_bos: bool, ?special: bool) -> Array[Integer]
    def desc: () -> String
    def size: () -> Integer
    def n_params: () -> Integer
    def text: (Integer) -> String
    def score: (Integer) -> Float
    def type: (Integer) -> Integer
    def token_bos: () -> Integer
    def token_eos: () -> Integer
    def token_nl: () -> Integer
    def add_bos_token?: () -> bool
    def add_eos_token?: () -> bool
    def token_prefix: () -> Integer
    def token_middle: () -> Integer
    def token_suffix: () -> Integer
    def token_eot: () -> Integer
  end

  class Timings
    public

    def t_start_ms: () -> Float
    def t_end_ms: () -> Float
    def t_load_ms: () -> Float
    def t_sample_ms: () -> Float
    def t_p_eval_ms: () -> Float
    def t_eval_ms: () -> Float
    def n_sample: () -> Integer
    def n_p_eval: () -> Integer
    def n_eval: () -> Integer
  end

  class ModelKVOverride
    public

    def key: () -> String
    def tag: () -> Integer
    def int_value: () -> Integer
    def float_value: () -> Float
    def bool_value: () -> bool
  end

  class ModelParams
    public

    def n_gpu_layers: () -> Integer
    def n_gpu_layers=: (Integer) -> Integer
    def split_mode: () -> Integer
    def split_mode=: (Integer) -> Integer
    def main_gpu: () -> Integer
    def main_gpu=: (Integer) -> Integer
    def tensor_split: () -> Array[Float]
    def vocab_only: () -> bool
    def vocab_only=: (bool) -> bool
    def use_mmap: () -> bool
    def use_mmap=: (bool) -> bool
    def use_mlock: () -> bool
    def use_mlock=: (bool) -> bool
  end

  class Batch
    public

    def self.get_one: (tokens: Array[Integer], n_tokens: Integer, pos_zero: Integer, seq_id: Integer) -> ::LLaMACpp::Batch
    def initialize: (max_n_token: Integer, n_embd: Integer, max_n_seq: Integer) -> void
    def n_tokens=: (Integer) -> Integer
    def n_tokens: () -> Integer
    def all_pos_zero=: (Integer) -> Integer
    def all_pos_zero: () -> Integer
    def all_pos_one=: (Integer) -> Integer
    def all_pos_one: () -> Integer
    def all_seq_id=: (Integer) -> Integer
    def all_seq_id: () -> Integer
    def set_token: (Integer, Integer) -> Integer
    def get_token: (Integer) -> Integer
    def set_pos: (Integer, Integer) -> Integer
    def get_pos: (Integer) -> Integer
    def set_n_seq_id: (Integer, Integer) -> Integer
    def get_n_seq_id: (Integer) -> Integer
    def set_seq_id: (Integer, Integer, Integer) -> Integer
    def get_seq_id: (Integer, Integer) -> Integer
    def set_logit: (Integer, bool) -> bool
    def get_logit: (Integer) -> bool
  end

  class Context
    public

    attr_reader model: ::LLaMACpp::Model

    def initialize: (model: ::LLaMACpp::Model, params: ::LLaMACpp::ContextParams) -> void
    def embeddings: () -> Array[Float]
    def eval: (tokens: Array[Integer], n_past: Integer, ?n_tokens: Integer) -> void
    def eval_embd: (tokens: Array[Float], n_past: Integer, ?n_tokens: Integer) -> void
    def decode: (::LLaMACpp::Batch) -> void
    def logits: () -> Array[Float]
    def n_ctx: () -> Integer
    def n_batch: () -> Integer
    def timings: () -> ::LLaMACpp::Timings
    def print_timings: () -> void
    def reset_timings: () -> void
    def kv_cache_token_count: () -> Integer
    def kv_cache_clear: () -> void
    def kv_cache_seq_rm: (Integer, Integer,Integer) -> void
    def kv_cache_seq_cp: (Integer, Integer,Integer, Integer) -> void
    def kv_cache_seq_keep: (Integer) -> void
    def kv_cache_seq_shift: (Integer, Integer, Integer, Integer) -> void
    def kv_cache_seq_div: (Integer, Integer, Integer, Integer) -> void
    def set_rng_seed: (Integer) -> void
    def load_session_file: (session_path: String) -> void
    def save_session_file: (session_path: String, session_tokens: Array[Integer]) -> void
    def sample_repetition_penalties: (::LLaMACpp::TokenDataArray, Array[Integer], penalty_repeat: Float, penalty_freq: Float, penalty_present: Float) -> void
    def sample_apply_guidance: (logits: Array[Float], logits_guidance: Array[Float], scale: Float) -> void
    def sample_classifier_free_guidance: (::LLaMACpp::TokenDataArray, guidance: ::LLaMACpp::Context, scale: Float) -> void
    def sample_softmax: (::LLaMACpp::TokenDataArray) -> void
    def sample_top_k: (::LLaMACpp::TokenDataArray, k: Integer, ?min_keep: Integer) -> void
    def sample_top_p: (::LLaMACpp::TokenDataArray, prob: Float, ?min_keep: Integer) -> void
    def sample_min_p: (::LLaMACpp::TokenDataArray, prob: Float, ?min_keep: Integer) -> void
    def sample_tail_free: (::LLaMACpp::TokenDataArray, z: Float, ?min_keep: Integer) -> void
    def sample_typical: (::LLaMACpp::TokenDataArray, prob: Float, ?min_keep: Integer) -> void
    def sample_temp: (::LLaMACpp::TokenDataArray, temp: Float) -> void
    def sample_entropy: (::LLaMACpp::TokenDataArray, min_temp: Float, max_temp: Float, exponent_val: Float) -> void
    def sample_temperature: (::LLaMACpp::TokenDataArray, temperature: Float) -> void
    def sample_token_mirostat: (::LLaMACpp::TokenDataArray, tau: Float, eta: Float, m: Integer, mu: Float) -> [Integer, Float]
    def sample_token_mirostat_v2: (::LLaMACpp::TokenDataArray, tau: Float, eta: Float, mu: Float) -> [Integer, Float]
    def sample_token_greedy: (::LLaMACpp::TokenDataArray) -> Integer
    def sample_token: (::LLaMACpp::TokenDataArray) -> Integer
    def sample_grammar: (::LLaMACpp::TokenDataArray, grammar: ::LLaMACpp::Grammar) -> void
    def grammar_accept_token: (grammar: ::LLaMACpp::Grammar, token: Integer) -> void
  end

  class ContextParams
    public

    def seed: () -> Integer
    def seed=: (Integer) -> Integer
    def n_ctx: () -> Integer
    def n_ctx=: (Integer) -> Integer
    def n_batch: () -> Integer
    def n_batch=: (Integer) -> Integer
    def n_threads: () -> Integer
    def n_threads=: (Integer) -> Integer
    def n_threads_batch: () -> Integer
    def n_threads_batch=: (Integer) -> Integer
    def rope_scaling_type=: (Integer) -> Integer
    def rope_scaling_type: () -> Integer
    def rope_freq_base=: (Float) -> Float
    def rope_freq_base: () -> Float
    def rope_freq_scale=: (Float) -> Float
    def rope_freq_scale: () -> Float
    def yarn_ext_factor=: (Float) -> Float
    def yarn_ext_factor: () -> Float
    def yarn_attn_factor=: (Float) -> Float
    def yarn_attn_factor: () -> Float
    def yarn_beta_fast=: (Float) -> Float
    def yarn_beta_fast: () -> Float
    def yarn_beta_slow=: (Float) -> Float
    def yarn_beta_slow: () -> Float
    def yarn_orig_ctx=: (Integer) -> Integer
    def yarn_orig_ctx: () -> Integer
    def type_k=: (Integer) -> Integer
    def type_k: () -> Integer
    def type_v=: (Integer) -> Integer
    def type_v: () -> Integer
    def mul_mat_q: () -> bool
    def mul_mat_q=: (bool) -> bool
    def logits_all: () -> bool
    def logits_all=: (bool) -> bool
    def embedding: () -> bool
    def embedding=: (bool) -> bool
    def offload_kqv: () -> bool
    def offload_kqv=: (bool) -> bool
  end

  class ModelQuantizeParams
    public

    attr_reader params: ::LLaMACpp::ModelParams

    def n_thread: () -> Integer
    def n_thread=: (Integer) -> Integer
    def ftype: () -> Integer
    def ftype=: (Integer) -> Integer
    def allow_quantization: () -> bool
    def allow_quantization=: (bool) -> bool
    def quantize_output_tensor: () -> bool
    def quantize_output_tensor=: (bool) -> bool
    def only_copy: () -> bool
    def only_copy=: (bool) -> bool
    def pure: () -> bool
    def pure=: (bool) -> bool
  end

  class Params = ContextParams

  class GrammarElement
    public

    def initialize: (?type: Integer, ?value: Integer) -> void
    def type: () -> Integer
    def type=: (Integer) -> Integer
    def value: () -> Integer
    def value=: (Integer) -> Integer
  end

  class Grammar
    def initialize: (rules: Array[Array[LLaMACpp::GrammarElement]], start_rule_index: Integer) -> void
  end
end
